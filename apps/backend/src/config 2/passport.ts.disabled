/**
 * Passport Configuration
 * Configures OAuth strategies for social authentication
 */

import passport from 'passport';
import { Strategy as GoogleStrategy } from 'passport-google-oauth20';
import { Strategy as GitHubStrategy } from 'passport-github2';
import { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';
import { prisma } from './database';
import { socialAuthService } from '../services/social-auth.service';
import { AuthProvider, UserRole } from '@prisma/client';
import { logger } from '../utils/logger';

// Environment variables
const {
  GOOGLE_CLIENT_ID,
  GOOGLE_CLIENT_SECRET,
  GOOGLE_CALLBACK_URL,
  GITHUB_CLIENT_ID,
  GITHUB_CLIENT_SECRET,
  GITHUB_CALLBACK_URL,
  JWT_SECRET,
  BASE_URL = 'http://localhost:3000',
} = process.env;

/**
 * JWT Strategy for API authentication
 */
passport.use(
  new JwtStrategy(
    {
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      secretOrKey: JWT_SECRET || 'jwt-secret-key',
    },
    async (payload, done) => {
      try {
        const user = await prisma.user.findUnique({
          where: { id: payload.userId },
          select: {
            id: true,
            email: true,
            role: true,
            isActive: true,
            isDeleted: true,
            firstName: true,
            lastName: true,
            avatar: true,
          },
        });

        if (!user || !user.isActive || user.isDeleted) {
          return done(null, false);
        }

        return done(null, user);
      } catch (error) {
        return done(error, false);
      }
    }
  )
);

/**
 * Google OAuth 2.0 Strategy
 */
if (GOOGLE_CLIENT_ID && GOOGLE_CLIENT_SECRET) {
  passport.use(
    new GoogleStrategy(
      {
        clientID: GOOGLE_CLIENT_ID,
        clientSecret: GOOGLE_CLIENT_SECRET,
        callbackURL: GOOGLE_CALLBACK_URL || `${BASE_URL}/api/auth/google/callback`,
        scope: ['profile', 'email'],
      },
      async (accessToken, refreshToken, profile, done) => {
        try {
          logger.info('Google OAuth callback received', {
            profileId: profile.id,
            email: profile.emails?.[0]?.value,
          });

          // Extract profile information
          const socialProfile = {
            id: profile.id,
            email: profile.emails?.[0]?.value || '',
            name: profile.displayName,
            firstName: profile.name?.givenName,
            lastName: profile.name?.familyName,
            avatar: profile.photos?.[0]?.value,
            provider: AuthProvider.GOOGLE,
            accessToken,
            refreshToken,
            profile: {
              id: profile.id,
              displayName: profile.displayName,
              emails: profile.emails,
              photos: profile.photos,
              provider: profile.provider,
            },
          };

          // Authenticate or create user
          const authResult = await socialAuthService.authenticateWithProvider(
            socialProfile,
            UserRole.ACTOR // Default role, can be changed during onboarding
          );

          return done(null, authResult);
        } catch (error) {
          logger.error('Google OAuth error', error);
          return done(error as Error, false);
        }
      }
    )
  );
} else {
  logger.warn('Google OAuth not configured - missing client ID or secret');
}

/**
 * GitHub OAuth Strategy
 */
if (GITHUB_CLIENT_ID && GITHUB_CLIENT_SECRET) {
  passport.use(
    new GitHubStrategy(
      {
        clientID: GITHUB_CLIENT_ID,
        clientSecret: GITHUB_CLIENT_SECRET,
        callbackURL: GITHUB_CALLBACK_URL || `${BASE_URL}/api/auth/github/callback`,
        scope: ['user:email'],
      },
      async (accessToken: string, refreshToken: string, profile: any, done: any) => {
        try {
          logger.info('GitHub OAuth callback received', {
            profileId: profile.id,
            username: profile.username,
          });

          // Extract profile information
          const socialProfile = {
            id: profile.id,
            email: profile.emails?.[0]?.value || `${profile.username}@github.local`,
            name: profile.displayName || profile.username,
            firstName: profile.displayName?.split(' ')[0],
            lastName: profile.displayName?.split(' ').slice(1).join(' '),
            avatar: profile.photos?.[0]?.value || profile._json?.avatar_url,
            provider: AuthProvider.GITHUB,
            accessToken,
            refreshToken,
            profile: {
              id: profile.id,
              username: profile.username,
              displayName: profile.displayName,
              profileUrl: profile.profileUrl,
              emails: profile.emails,
              photos: profile.photos,
              provider: profile.provider,
              bio: profile._json?.bio,
              company: profile._json?.company,
              location: profile._json?.location,
              hireable: profile._json?.hireable,
            },
          };

          // Authenticate or create user
          const authResult = await socialAuthService.authenticateWithProvider(
            socialProfile,
            UserRole.ACTOR // Default role
          );

          return done(null, authResult);
        } catch (error) {
          logger.error('GitHub OAuth error', error);
          return done(error as Error, false);
        }
      }
    )
  );
} else {
  logger.warn('GitHub OAuth not configured - missing client ID or secret');
}

/**
 * Serialize user for session
 */
passport.serializeUser((user: any, done) => {
  done(null, user.user?.id || user.id);
});

/**
 * Deserialize user from session
 */
passport.deserializeUser(async (id: string, done) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id },
      select: {
        id: true,
        email: true,
        role: true,
        firstName: true,
        lastName: true,
        avatar: true,
        isActive: true,
        isEmailVerified: true,
        socialAccounts: {
          select: {
            provider: true,
            isLinked: true,
          },
        },
      },
    });

    if (!user || !user.isActive) {
      return done(null, false);
    }

    done(null, user);
  } catch (error) {
    done(error, null);
  }
});

/**
 * Export configured passport instance
 */
export default passport;

/**
 * Middleware to ensure user is authenticated
 */
export const ensureAuthenticated = passport.authenticate('jwt', { session: false });

/**
 * Middleware for optional authentication
 */
export const optionalAuth = passport.authenticate('jwt', {
  session: false,
  failureRedirect: undefined,
});

/**
 * Social auth middleware factory
 */
export const socialAuth = (provider: 'google' | 'github') => {
  const scopes: Record<string, string[]> = {
    google: ['profile', 'email'],
    github: ['user:email'],
  };

  return passport.authenticate(provider, {
    scope: scopes[provider],
    session: false,
  });
};

/**
 * Social auth callback middleware factory
 */
export const socialAuthCallback = (provider: 'google' | 'github') => {
  return passport.authenticate(provider, {
    session: false,
    failureRedirect: `${process.env.FRONTEND_URL || 'http://localhost:3001'}/auth/error`,
  });
};