version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: castmatch-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: castmatch123
      POSTGRES_DB: castmatch_db
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d castmatch_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - castmatch-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: castmatch-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass castmatch_redis_password --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "castmatch_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - castmatch-network

  # Node.js Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: castmatch-backend
    restart: unless-stopped
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 5002
      DATABASE_URL: postgresql://postgres:castmatch123@postgres:5432/castmatch_db?schema=public
      REDIS_URL: redis://:castmatch_redis_password@redis:6379
      JWT_SECRET: ${JWT_SECRET:-u3776dZsWJYU3EnvuNDcmOjfKWaIcuWGU+F6WaW+7GQMC9kkCH3Hd3hZlQBWwDZCJi87ZEJ1ckbLsfOEoSVBpw==}
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
      # AI Service URLs
      PYTHON_AI_SERVICE_URL: http://python-ai:8000
      # AWS Credentials (for development)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # Email Service
      EMAIL_FROM: ${EMAIL_FROM:-noreply@castmatch.com}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      # Storage
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - backend_node_modules:/app/node_modules
    networks:
      - castmatch-network
    command: npm run dev

  # Next.js Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: castmatch-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:5002/api
      NEXT_PUBLIC_WS_URL: ws://localhost:5002
      NEXT_PUBLIC_SITE_URL: http://localhost:3000
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    networks:
      - castmatch-network
    command: npm run dev

  # Python AI Service
  python-ai:
    build:
      context: ./python-ai-service
      dockerfile: Dockerfile
    container_name: castmatch-python-ai
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgresql://postgres:castmatch123@postgres:5432/castmatch_db
      REDIS_URL: redis://:castmatch_redis_password@redis:6379
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Anthropic Configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      # Model Settings
      DEFAULT_MODEL: gpt-4
      MAX_TOKENS: 2000
      TEMPERATURE: 0.7
    volumes:
      - ./python-ai-service:/app
      - python_cache:/app/.cache
    networks:
      - castmatch-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: castmatch-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@castmatch.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - castmatch-network

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: castmatch-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:castmatch_redis_password
    depends_on:
      - redis
    networks:
      - castmatch-network

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: castmatch-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - castmatch-network

networks:
  castmatch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  python_cache:
    driver: local