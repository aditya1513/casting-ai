services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: castmatch-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: castmatch123
      POSTGRES_DB: castmatch_db
      # Remove host auth method to use password authentication properly
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      # Use md5 authentication for external connections 
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Add init script to ensure proper permissions
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d castmatch_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - castmatch-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: castmatch-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass castmatch_redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - castmatch-network

  # Application (commented out by default - use for production)
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: castmatch-backend
  #   restart: unless-stopped
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     NODE_ENV: production
  #     DATABASE_URL: postgresql://postgres:castmatch123@postgres:5432/castmatch_db
  #     REDIS_URL: redis://:castmatch_redis_password@redis:6379
  #     JWT_SECRET: ${JWT_SECRET}
  #     CORS_ORIGINS: ${CORS_ORIGINS}
  #   volumes:
  #     - ./logs:/app/logs
  #     - ./uploads:/app/uploads
  #   networks:
  #     - castmatch-network

  # PgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: castmatch-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@castmatch.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - castmatch-network

  # Redis Commander (optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: castmatch-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:castmatch_redis_password
    depends_on:
      - redis
    networks:
      - castmatch-network

networks:
  castmatch-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local