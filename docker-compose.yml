services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: castmatch-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: castmatch123
      POSTGRES_DB: castmatch_db
      # Remove host auth method to use password authentication properly
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      # Use trust authentication for local development (no password required)
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Add init script to ensure proper permissions
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d castmatch_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - castmatch-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: castmatch-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass castmatch_redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - castmatch-network

  # Application (for development testing)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: castmatch-backend
    restart: unless-stopped
    ports:
      - "5003:5002"  # Changed port to avoid conflict
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 5002
      DATABASE_URL: postgresql://castmatch_user:castmatch_pass@postgres:5432/castmatch_db?schema=public
      REDIS_URL: redis://:castmatch_redis_password@redis:6379
      JWT_SECRET: u3776dZsWJYU3EnvuNDcmOjfKWaIcuWGU+F6WaW+7GQMC9kkCH3Hd3hZlQBWwDZCJi87ZEJ1ckbLsfOEoSVBpw==
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - castmatch-network

  # PgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: castmatch-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@castmatch.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - castmatch-network

  # Redis Commander (optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: castmatch-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:castmatch_redis_password
    depends_on:
      - redis
    networks:
      - castmatch-network

networks:
  castmatch-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local