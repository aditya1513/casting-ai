/**
 * Authentication Controller
 * Handles user authentication and authorization
 */

import { Request, Response } from 'express';
import { AuthService } from '../services/auth.service';
import { asyncHandler } from '../middleware/errorHandler';
import { LogContext } from '../utils/logger';
import type {
  RegisterInput,
  LoginInput,
  RefreshTokenInput,
  ForgotPasswordInput,
  ResetPasswordInput,
  ChangePasswordInput,
  VerifyEmailInput,
} from '../validators/auth.validator';

export class AuthController {
  private authService: AuthService;
  
  constructor() {
    this.authService = new AuthService();
  }
  
  /**
   * Register new user
   */
  register = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const data = req.body as RegisterInput;
    
    const result = await this.authService.register(data);
    
    LogContext.auth('register', result.user.id, true);
    
    res.status(201).json({
      success: true,
      message: 'Registration successful. Please verify your email.',
      data: result,
    });
  });
  
  /**
   * Login user
   */
  login = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const data = req.body as LoginInput;
    const userAgent = req.headers['user-agent'];
    const ipAddress = req.ip;
    
    const result = await this.authService.login(data, { userAgent, ipAddress });
    
    LogContext.auth('login', result.user.id, true);
    
    res.status(200).json({
      success: true,
      message: 'Login successful',
      data: result,
    });
  });
  
  /**
   * Refresh access token
   */
  refreshToken = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const { refreshToken } = req.body as RefreshTokenInput;
    
    const result = await this.authService.refreshToken(refreshToken);
    
    res.status(200).json({
      success: true,
      message: 'Token refreshed successfully',
      data: result,
    });
  });
  
  /**
   * Logout user
   */
  logout = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const userId = (req as any).user?.id!;
    const sessionId = (req as any).user?.sessionId;
    
    await this.authService.logout(userId, sessionId!);
    
    LogContext.auth('logout', userId, true);
    
    res.status(200).json({
      success: true,
      message: 'Logout successful',
    });
  });
  
  /**
   * Request password reset
   */
  forgotPassword = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const { email } = req.body as ForgotPasswordInput;
    
    await this.authService.forgotPassword(email);
    
    res.status(200).json({
      success: true,
      message: 'If an account exists with this email, a password reset link has been sent.',
    });
  });
  
  /**
   * Reset password with token
   */
  resetPassword = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const { token, password } = req.body as ResetPasswordInput;
    
    await this.authService.resetPassword(token, password);
    
    res.status(200).json({
      success: true,
      message: 'Password reset successful. Please login with your new password.',
    });
  });
  
  /**
   * Change password for authenticated user
   */
  changePassword = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const userId = (req as any).user?.id!
    const { currentPassword, newPassword } = req.body as ChangePasswordInput;
    
    await this.authService.changePassword(userId, currentPassword, newPassword);
    
    LogContext.auth('change_password', userId, true);
    
    res.status(200).json({
      success: true,
      message: 'Password changed successfully',
    });
  });
  
  /**
   * Verify email address
   */
  verifyEmail = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const { token } = req.body as VerifyEmailInput;
    
    await this.authService.verifyEmail(token);
    
    res.status(200).json({
      success: true,
      message: 'Email verified successfully',
    });
  });
  
  /**
   * Get current user
   */
  getCurrentUser = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const userId = (req as any).user?.id!
    
    const user = await this.authService.getCurrentUser(userId);
    
    res.status(200).json({
      success: true,
      data: { user },
    });
  });
}