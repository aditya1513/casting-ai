import { pgTable, text, timestamp, boolean, doublePrecision, integer, jsonb } from 'drizzle-orm/pg-core';
import { pgEnum } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

// Enums
export const genderEnum = pgEnum('Gender', ['MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY']);
export const unionStatusEnum = pgEnum('UnionStatus', ['UNION', 'NON_UNION', 'FICORE']);
export const experienceLevelEnum = pgEnum('ExperienceLevel', ['BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'NATIVE']);
export const availabilityStatusEnum = pgEnum('AvailabilityStatus', ['AVAILABLE', 'BUSY', 'PARTIALLY_AVAILABLE', 'UNAVAILABLE']);
export const profileCompletenessEnum = pgEnum('ProfileCompleteness', ['BASIC', 'INTERMEDIATE', 'COMPLETE', 'PREMIUM']);
export const userRoleEnum = pgEnum('UserRole', ['ACTOR', 'CASTING_DIRECTOR', 'PRODUCER', 'AGENT', 'MANAGER', 'ADMIN']);
export const authProviderEnum = pgEnum('AuthProvider', ['EMAIL', 'GOOGLE', 'FACEBOOK', 'APPLE']);
export const twoFactorMethodEnum = pgEnum('TwoFactorMethod', ['SMS', 'EMAIL', 'TOTP']);

// Users table
export const users = pgTable('users', {
  id: text('id').primaryKey(),
  email: text('email').notNull().unique(),
  emailVerified: boolean('emailVerified').default(false).notNull(),
  emailVerificationToken: text('emailVerificationToken'),
  emailVerificationExpires: timestamp('emailVerificationExpires', { mode: 'date', withTimezone: false }),
  password: text('password'),
  firstName: text('firstName'),
  lastName: text('lastName'),
  profileImage: text('profileImage'),
  role: userRoleEnum('role').default('ACTOR').notNull(),
  phoneNumber: text('phoneNumber'),
  isPhoneVerified: boolean('isPhoneVerified').default(false).notNull(),
  dateOfBirth: timestamp('dateOfBirth', { mode: 'date', withTimezone: false }),
  gender: genderEnum('gender'),
  location: text('location'),
  bio: text('bio'),
  isActive: boolean('isActive').default(true).notNull(),
  lastLogin: timestamp('lastLogin', { mode: 'date', withTimezone: false }),
  loginCount: integer('loginCount').default(0).notNull(),
  authProvider: authProviderEnum('authProvider').default('EMAIL').notNull(),
  authProviderUserId: text('authProviderUserId'),
  twoFactorEnabled: boolean('twoFactorEnabled').default(false).notNull(),
  twoFactorMethod: twoFactorMethodEnum('twoFactorMethod'),
  twoFactorBackupCodes: text('twoFactorBackupCodes').array(),
  passwordResetToken: text('passwordResetToken'),
  passwordResetExpires: timestamp('passwordResetExpires', { mode: 'date', withTimezone: false }),
  createdAt: timestamp('createdAt', { mode: 'date', withTimezone: false }).defaultNow().notNull(),
  updatedAt: timestamp('updatedAt', { mode: 'date', withTimezone: false }).notNull(),
});

// Talents table
export const talents = pgTable('talents', {
  id: text('id').primaryKey(),
  userId: text('userId').notNull().references(() => users.id, { onDelete: 'cascade', onUpdate: 'cascade' }).unique(),
  firstName: text('firstName').notNull(),
  lastName: text('lastName').notNull(),
  middleName: text('middleName'),
  displayName: text('displayName'),
  dateOfBirth: timestamp('dateOfBirth', { mode: 'date', withTimezone: false }).notNull(),
  gender: genderEnum('gender').notNull(),
  nationality: text('nationality').default('Indian').notNull(),
  aadharNumber: text('aadharNumber'),
  panNumber: text('panNumber'),
  passportNumber: text('passportNumber'),
  primaryPhone: text('primaryPhone').notNull(),
  secondaryPhone: text('secondaryPhone'),
  whatsappNumber: text('whatsappNumber'),
  email: text('email').notNull(),
  alternateEmail: text('alternateEmail'),
  currentCity: text('currentCity').notNull(),
  currentState: text('currentState').notNull(),
  currentPincode: text('currentPincode'),
  hometown: text('hometown'),
  preferredLocations: text('preferredLocations').array(),
  willingToRelocate: boolean('willingToRelocate').default(false).notNull(),
  height: doublePrecision('height'),
  weight: doublePrecision('weight'),
  chest: doublePrecision('chest'),
  waist: doublePrecision('waist'),
  hips: doublePrecision('hips'),
  shoeSize: text('shoeSize'),
  dressSize: text('dressSize'),
  bio: text('bio'),
  experience: jsonb('experience'),
  yearsOfExperience: integer('yearsOfExperience').default(0).notNull(),
  unionStatus: unionStatusEnum('unionStatus').default('NON_UNION').notNull(),
  unionId: text('unionId'),
  agentId: text('agentId'),
  agencyName: text('agencyName'),
  managerName: text('managerName'),
  managerContact: text('managerContact'),
  actingSkills: text('actingSkills').array(),
  danceSkills: text('danceSkills').array(),
  martialArts: text('martialArts').array(),
  musicalInstruments: text('musicalInstruments').array(),
  singingSkills: text('singingSkills').array(),
  languages: text('languages').array(),
  dialects: text('dialects').array(),
  accents: text('accents').array(),
  specialSkills: text('specialSkills').array(),
  marathiProficiency: experienceLevelEnum('marathiProficiency'),
  hindiProficiency: experienceLevelEnum('hindiProficiency'),
  englishProficiency: experienceLevelEnum('englishProficiency'),
  gujaratiProficiency: experienceLevelEnum('gujaratiProficiency'),
  regionalExperience: text('regionalExperience').array(),
  availabilityStatus: availabilityStatusEnum('availabilityStatus').default('AVAILABLE').notNull(),
  availableFrom: timestamp('availableFrom', { mode: 'date', withTimezone: false }),
  availableTo: timestamp('availableTo', { mode: 'date', withTimezone: false }),
  minimumRate: doublePrecision('minimumRate'),
  maximumRate: doublePrecision('maximumRate'),
  preferredRate: doublePrecision('preferredRate'),
  rateNegotiable: boolean('rateNegotiable').default(true).notNull(),
  profileImageUrl: text('profileImageUrl'),
  portfolioUrls: text('portfolioUrls').array(),
  instagramHandle: text('instagramHandle'),
  facebookProfile: text('facebookProfile'),
  linkedinProfile: text('linkedinProfile'),
  youtubeChannel: text('youtubeChannel'),
  websiteUrl: text('websiteUrl'),
  profileCompleteness: profileCompletenessEnum('profileCompleteness').default('BASIC').notNull(),
  profileScore: doublePrecision('profileScore').default(0).notNull(),
  isVerified: boolean('isVerified').default(false).notNull(),
  verifiedAt: timestamp('verifiedAt', { mode: 'date', withTimezone: false }),
  verificationNotes: text('verificationNotes'),
  embeddingId: text('embeddingId').unique(),
  embeddingUpdatedAt: timestamp('embeddingUpdatedAt', { mode: 'date', withTimezone: false }),
  searchTags: text('searchTags').array(),
  aiGeneratedSummary: text('aiGeneratedSummary'),
  lastAiAnalysis: timestamp('lastAiAnalysis', { mode: 'date', withTimezone: false }),
  rating: doublePrecision('rating').default(0).notNull(),
  totalReviews: integer('totalReviews').default(0).notNull(),
  totalAuditions: integer('totalAuditions').default(0).notNull(),
  totalCallbacks: integer('totalCallbacks').default(0).notNull(),
  totalBookings: integer('totalBookings').default(0).notNull(),
  responseRate: doublePrecision('responseRate').default(100).notNull(),
  responseTime: integer('responseTime').default(0).notNull(),
  isActive: boolean('isActive').default(true).notNull(),
  isPremium: boolean('isPremium').default(false).notNull(),
  premiumExpiresAt: timestamp('premiumExpiresAt', { mode: 'date', withTimezone: false }),
  lastActiveAt: timestamp('lastActiveAt', { mode: 'date', withTimezone: false }).defaultNow().notNull(),
  profileViewsCount: integer('profileViewsCount').default(0).notNull(),
  createdAt: timestamp('createdAt', { mode: 'date', withTimezone: false }).defaultNow().notNull(),
  updatedAt: timestamp('updatedAt', { mode: 'date', withTimezone: false }).notNull(),
});

// Relations
export const usersRelations = relations(users, ({ one, many }) => ({
  talent: one(talents, { fields: [users.id], references: [talents.userId] }),
}));

export const talentsRelations = relations(talents, ({ one }) => ({
  user: one(users, { fields: [talents.userId], references: [users.id] }),
}));