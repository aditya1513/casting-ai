export interface UserFactoryOptions {
    role?: 'ACTOR' | 'CASTING_DIRECTOR' | 'PRODUCER' | 'AGENT' | 'ADMIN';
    verified?: boolean;
    twoFactorEnabled?: boolean;
    customData?: Record<string, any>;
}
export declare class UserFactory {
    static create(options?: UserFactoryOptions): Promise<{
        plainPassword: any;
        role: import(".prisma/client").$Enums.UserRole;
        id: string;
        email: string;
        avatar: string | null;
        refreshToken: string | null;
        createdAt: Date;
        phone: string | null;
        password: string | null;
        isEmailVerified: boolean;
        isPhoneVerified: boolean;
        isActive: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        lastLoginAt: Date | null;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        twoFactorEnabled: boolean;
        twoFactorMethod: import(".prisma/client").$Enums.TwoFactorMethod | null;
        twoFactorSecret: string | null;
        twoFactorBackup: string[];
        failedLoginAttempts: number;
        accountLockedUntil: Date | null;
        lastPasswordChange: Date | null;
        passwordHistory: string[];
        username: string | null;
        firstName: string | null;
        lastName: string | null;
        bio: string | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
        loginHistory: import("@prisma/client/runtime/library").JsonValue[];
        securityLog: import("@prisma/client/runtime/library").JsonValue[];
        ipWhitelist: string[];
        ipBlacklist: string[];
        updatedAt: Date;
    }>;
    static createMany(count: number, options?: UserFactoryOptions): Promise<{
        plainPassword: any;
        role: import(".prisma/client").$Enums.UserRole;
        id: string;
        email: string;
        avatar: string | null;
        refreshToken: string | null;
        createdAt: Date;
        phone: string | null;
        password: string | null;
        isEmailVerified: boolean;
        isPhoneVerified: boolean;
        isActive: boolean;
        isDeleted: boolean;
        deletedAt: Date | null;
        lastLoginAt: Date | null;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        twoFactorEnabled: boolean;
        twoFactorMethod: import(".prisma/client").$Enums.TwoFactorMethod | null;
        twoFactorSecret: string | null;
        twoFactorBackup: string[];
        failedLoginAttempts: number;
        accountLockedUntil: Date | null;
        lastPasswordChange: Date | null;
        passwordHistory: string[];
        username: string | null;
        firstName: string | null;
        lastName: string | null;
        bio: string | null;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
        loginHistory: import("@prisma/client/runtime/library").JsonValue[];
        securityLog: import("@prisma/client/runtime/library").JsonValue[];
        ipWhitelist: string[];
        ipBlacklist: string[];
        updatedAt: Date;
    }[]>;
    static createWithProfile(options?: UserFactoryOptions): Promise<{
        user: {
            plainPassword: any;
            role: import(".prisma/client").$Enums.UserRole;
            id: string;
            email: string;
            avatar: string | null;
            refreshToken: string | null;
            createdAt: Date;
            phone: string | null;
            password: string | null;
            isEmailVerified: boolean;
            isPhoneVerified: boolean;
            isActive: boolean;
            isDeleted: boolean;
            deletedAt: Date | null;
            lastLoginAt: Date | null;
            resetToken: string | null;
            resetTokenExpiry: Date | null;
            twoFactorEnabled: boolean;
            twoFactorMethod: import(".prisma/client").$Enums.TwoFactorMethod | null;
            twoFactorSecret: string | null;
            twoFactorBackup: string[];
            failedLoginAttempts: number;
            accountLockedUntil: Date | null;
            lastPasswordChange: Date | null;
            passwordHistory: string[];
            username: string | null;
            firstName: string | null;
            lastName: string | null;
            bio: string | null;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            loginHistory: import("@prisma/client/runtime/library").JsonValue[];
            securityLog: import("@prisma/client/runtime/library").JsonValue[];
            ipWhitelist: string[];
            ipBlacklist: string[];
            updatedAt: Date;
        };
        profile: any;
    }>;
    static createWithSession(options?: UserFactoryOptions): Promise<{
        user: {
            plainPassword: any;
            role: import(".prisma/client").$Enums.UserRole;
            id: string;
            email: string;
            avatar: string | null;
            refreshToken: string | null;
            createdAt: Date;
            phone: string | null;
            password: string | null;
            isEmailVerified: boolean;
            isPhoneVerified: boolean;
            isActive: boolean;
            isDeleted: boolean;
            deletedAt: Date | null;
            lastLoginAt: Date | null;
            resetToken: string | null;
            resetTokenExpiry: Date | null;
            twoFactorEnabled: boolean;
            twoFactorMethod: import(".prisma/client").$Enums.TwoFactorMethod | null;
            twoFactorSecret: string | null;
            twoFactorBackup: string[];
            failedLoginAttempts: number;
            accountLockedUntil: Date | null;
            lastPasswordChange: Date | null;
            passwordHistory: string[];
            username: string | null;
            firstName: string | null;
            lastName: string | null;
            bio: string | null;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            loginHistory: import("@prisma/client/runtime/library").JsonValue[];
            securityLog: import("@prisma/client/runtime/library").JsonValue[];
            ipWhitelist: string[];
            ipBlacklist: string[];
            updatedAt: Date;
        };
        session: {
            userId: string;
            id: string;
            createdAt: Date;
            ipAddress: string | null;
            userAgent: string | null;
            expiresAt: Date;
            token: string;
        };
        sessionToken: any;
    }>;
    static createWithOAuth(provider: 'google' | 'github', options?: UserFactoryOptions): Promise<{
        user: {
            plainPassword: any;
            role: import(".prisma/client").$Enums.UserRole;
            id: string;
            email: string;
            avatar: string | null;
            refreshToken: string | null;
            createdAt: Date;
            phone: string | null;
            password: string | null;
            isEmailVerified: boolean;
            isPhoneVerified: boolean;
            isActive: boolean;
            isDeleted: boolean;
            deletedAt: Date | null;
            lastLoginAt: Date | null;
            resetToken: string | null;
            resetTokenExpiry: Date | null;
            twoFactorEnabled: boolean;
            twoFactorMethod: import(".prisma/client").$Enums.TwoFactorMethod | null;
            twoFactorSecret: string | null;
            twoFactorBackup: string[];
            failedLoginAttempts: number;
            accountLockedUntil: Date | null;
            lastPasswordChange: Date | null;
            passwordHistory: string[];
            username: string | null;
            firstName: string | null;
            lastName: string | null;
            bio: string | null;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            loginHistory: import("@prisma/client/runtime/library").JsonValue[];
            securityLog: import("@prisma/client/runtime/library").JsonValue[];
            ipWhitelist: string[];
            ipBlacklist: string[];
            updatedAt: Date;
        };
        oauthAccount: any;
    }>;
    static generateMockUserData(options?: UserFactoryOptions): {
        email: any;
        password: any;
        firstName: any;
        lastName: any;
        role: "ACTOR" | "CASTING_DIRECTOR" | "PRODUCER" | "AGENT" | "ADMIN";
        phoneNumber: any;
    };
    static cleanup(userId?: string): Promise<void>;
}
//# sourceMappingURL=userFactory.d.ts.map