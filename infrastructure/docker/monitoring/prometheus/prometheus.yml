# Prometheus Configuration for CastMatch

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    environment: '${ENVIRONMENT}'
    project: 'castmatch'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "/etc/prometheus/alerts.yml"

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Node Exporter for host metrics
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'castmatch-host'

  # PostgreSQL metrics
  - job_name: 'postgresql'
    static_configs:
      - targets: ['postgres-exporter:9187']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'castmatch-postgresql'

  # Redis metrics
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'castmatch-redis'

  # Container metrics from cAdvisor
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'castmatch-containers'

  # Backend application metrics
  - job_name: 'backend'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['host.docker.internal:5000']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'castmatch-backend'

  # Frontend application metrics
  - job_name: 'frontend'
    metrics_path: '/api/metrics'
    static_configs:
      - targets: ['host.docker.internal:3000']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'castmatch-frontend'

  # Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']

  # Loki metrics
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']

  # Jaeger metrics
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']

  # Elasticsearch metrics
  - job_name: 'elasticsearch'
    metrics_path: '/_prometheus/metrics'
    static_configs:
      - targets: ['elasticsearch:9200']

  # AWS CloudWatch Exporter (if using AWS)
  - job_name: 'cloudwatch'
    ec2_sd_configs:
      - region: us-east-1
        port: 9106
        filters:
          - name: tag:Environment
            values: ['production']
          - name: tag:Project
            values: ['castmatch']

  # Blackbox Exporter for endpoint monitoring
  - job_name: 'blackbox-http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - https://castmatch.com
          - https://api.castmatch.com/health
          - https://castmatch.com/api/auth/session
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  # DNS monitoring
  - job_name: 'blackbox-dns'
    metrics_path: /probe
    params:
      module: [dns_castmatch]
    static_configs:
      - targets:
          - castmatch.com
          - api.castmatch.com
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

# Remote write configuration for long-term storage
remote_write:
  - url: "${PROMETHEUS_REMOTE_WRITE_URL}"
    basic_auth:
      username: "${PROMETHEUS_REMOTE_WRITE_USERNAME}"
      password: "${PROMETHEUS_REMOTE_WRITE_PASSWORD}"
    write_relabel_configs:
      # Only send important metrics to remote storage
      - source_labels: [__name__]
        regex: '(up|http_requests_total|http_request_duration_seconds|node_cpu_seconds_total|node_memory_MemAvailable_bytes|pg_.*|redis_.*|process_.*)'
        action: keep