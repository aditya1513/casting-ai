# Multi-stage Dockerfile for CastMatch Frontend (Next.js)
# Optimized for Docker Desktop development with production-grade features

# Base stage with common dependencies
FROM node:18-alpine AS base

# Install system dependencies for building native modules
RUN apk add --no-cache \
    libc6-compat \
    curl \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Dependencies stage - install all dependencies
FROM base AS dependencies

# Install dependencies
RUN npm ci --verbose

# Development stage
FROM base AS development
ENV NODE_ENV=development

# Install all dependencies including devDependencies
RUN npm ci --verbose

# Copy source code
COPY . .

# Create .next directory with proper permissions
RUN mkdir -p .next && chown -R node:node .next

# Switch to node user for security
USER node

# Expose port
EXPOSE 3000

# Development command with hot reload
CMD ["npm", "run", "dev"]

# Builder stage - build the application
FROM dependencies AS builder

# Copy source code
COPY . .

# Set environment to production for build optimizations
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build the application
RUN npm run build

# Production stage - minimal runtime
FROM node:18-alpine AS production

# Install runtime dependencies only
RUN apk add --no-cache \
    curl \
    tini \
    && rm -rf /var/cache/apk/*

# Set environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000 \
    NODE_OPTIONS="--max-old-space-size=1024"

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --only=production && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "server.js"]